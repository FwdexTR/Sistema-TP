// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Aqui vocÃª pode definir seus modelos de dados
// Por exemplo:
model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      Role     @default(EMPLOYEE)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Client {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String?  @unique @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  address   String?  @db.Text
  status    String   @default("active") @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Task {
  id              String           @id @default(uuid())
  title           String           @db.VarChar(255)
  description     String?          @db.Text
  status          TaskStatus       @default(PENDING)
  priority        Priority         @default(MEDIUM)
  dueDate         DateTime?
  location        String?          @db.VarChar(255)
  hectares        Float?
  googleMapsLink  String?          @db.VarChar(255)
  kmlFile         String?          @db.VarChar(255)
  serviceValue    Float?
  completedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  client          Client           @relation(fields: [clientId], references: [id])
  clientId        String
  assignee        User?            @relation(fields: [assigneeId], references: [id])
  assigneeId      String?
  drone           Drone?           @relation(fields: [droneId], references: [id])
  droneId         String?
  car             Car?             @relation(fields: [carId], references: [id])
  carId           String?
  progressEntries ProgressEntry[]
  images          Image[]
}

model ProgressEntry {
  id          String   @id @default(uuid())
  date        DateTime
  description String   @db.Text
  photos      Image[]
  task        Task     @relation(fields: [taskId], references: [id])
  taskId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id              String        @id @default(uuid())
  filename        String        @db.VarChar(255)
  dataUrl         String        @db.Text
  uploadDate      DateTime      @default(now())
  task            Task          @relation(fields: [taskId], references: [id])
  taskId          String
  progressEntry   ProgressEntry? @relation(fields: [progressEntryId], references: [id])
  progressEntryId String?
}

model Drone {
  id        String   @id @default(uuid())
  model     String   @db.VarChar(255)
  status    String   @default("available") @db.VarChar(50)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Car {
  id        String   @id @default(uuid())
  model     String   @db.VarChar(255)
  plate     String   @unique @db.VarChar(20)
  year      Int
  status    String   @default("available") @db.VarChar(50)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankEntry {
  id          String   @id @default(uuid())
  description String   @db.VarChar(255)
  amount      Float
  type        String   @db.VarChar(50) // 'income' or 'expense'
  category    String?  @db.VarChar(100)
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ClientDebt {
  id                String   @id @default(uuid())
  clientName        String   @db.VarChar(255)
  serviceDescription String  @db.Text
  totalAmount       Float
  paidAmount        Float    @default(0)
  remainingAmount   Float
  date              DateTime
  taskId            String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ClientPayment {
  id        String   @id @default(uuid())
  clientName String  @db.VarChar(255)
  amount    Float
  debtId    String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
} 